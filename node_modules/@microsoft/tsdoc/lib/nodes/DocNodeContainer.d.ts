import { DocNode, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';
/**
 * Constructor parameters for {@link DocNodeContainer}.
 */
export interface IDocNodeContainerParameters extends IDocNodeParameters {
}
/**
 * Constructor parameters for {@link DocNodeContainer}.
 */
export interface IDocNodeContainerParsedParameters extends IDocNodeParsedParameters {
}
/**
 * DocNodeContainer is the base class for DocNode classes that act as a simple container
 * for other child nodes.  The child classes are {@link DocParagraph} and {@link DocSection}.
 */
export declare abstract class DocNodeContainer extends DocNode {
    private readonly _nodes;
    /**
     * Don't call this directly.  Instead use {@link TSDocParser}
     * @internal
     */
    constructor(parameters: IDocNodeContainerParameters | IDocNodeContainerParsedParameters);
    /**
     * The nodes that were added to this container.
     */
    readonly nodes: ReadonlyArray<DocNode>;
    /**
     * Returns true if the specified `docNode` is allowed to be added as a child node.
     * The {@link appendNode()} and {@link appendNodes()} functions use this to validate their
     * inputs.
     *
     * @virtual
     */
    isAllowedChildNode(docNode: DocNode): boolean;
    /**
     * Append a node to the container.
     */
    appendNode(docNode: DocNode): void;
    /**
     * Append nodes to the container.
     */
    appendNodes(docNodes: ReadonlyArray<DocNode>): void;
    /**
     * Remove all nodes from the container.
     */
    clearNodes(): void;
    /** @override */
    protected onGetChildNodes(): ReadonlyArray<DocNode | undefined>;
}
