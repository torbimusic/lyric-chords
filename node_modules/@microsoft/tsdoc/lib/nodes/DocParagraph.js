"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DocNodeContainer_1 = require("./DocNodeContainer");
/**
 * Represents a paragraph of text, similar to a `<p>` element in HTML.
 * Like CommonMark, the TSDoc syntax uses blank lines to delineate paragraphs
 * instead of explicitly notating them.
 */
var DocParagraph = /** @class */ (function (_super) {
    __extends(DocParagraph, _super);
    /**
     * Don't call this directly.  Instead use {@link TSDocParser}
     * @internal
     */
    function DocParagraph(parameters) {
        var _this = _super.call(this, parameters) || this;
        /** {@inheritDoc} */
        _this.kind = "Paragraph" /* Paragraph */;
        return _this;
    }
    /**
     * {@inheritDoc}
     * @override
     */
    DocParagraph.prototype.isAllowedChildNode = function (docNode) {
        // NOTE: DocNodeKind.Paragraph cannot be nested
        switch (docNode.kind) {
            case "BlockTag" /* BlockTag */:
            case "CodeSpan" /* CodeSpan */:
            case "ErrorText" /* ErrorText */:
            case "EscapedText" /* EscapedText */:
            case "HtmlStartTag" /* HtmlStartTag */:
            case "HtmlEndTag" /* HtmlEndTag */:
            case "InlineTag" /* InlineTag */:
            case "LinkTag" /* LinkTag */:
            case "PlainText" /* PlainText */:
            case "SoftBreak" /* SoftBreak */:
                return true;
        }
        return false;
    };
    return DocParagraph;
}(DocNodeContainer_1.DocNodeContainer));
exports.DocParagraph = DocParagraph;
//# sourceMappingURL=DocParagraph.js.map