"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DocNode_1 = require("./DocNode");
var DocSection_1 = require("./DocSection");
var StandardModifierTagSet_1 = require("../details/StandardModifierTagSet");
/**
 * Represents an entire documentation comment conforming to the TSDoc structure.
 * This is the root of the DocNode tree.
 */
var DocComment = /** @class */ (function (_super) {
    __extends(DocComment, _super);
    /**
     * Don't call this directly.  Instead use {@link TSDocParser}
     * @internal
     */
    function DocComment(parameters) {
        var _this = _super.call(this, parameters) || this;
        /** {@inheritDoc} */
        _this.kind = "Comment" /* Comment */;
        _this.summarySection = new DocSection_1.DocSection(parameters);
        _this.remarksBlock = undefined;
        _this.privateRemarks = undefined;
        _this.deprecatedBlock = undefined;
        _this.paramBlocks = [];
        _this.typeParamBlocks = [];
        _this.returnsBlock = undefined;
        _this.modifierTagSet = new StandardModifierTagSet_1.StandardModifierTagSet();
        _this._customBlocks = [];
        return _this;
    }
    Object.defineProperty(DocComment.prototype, "customBlocks", {
        /**
         * The collection of all DocBlock nodes belonging to this doc comment.
         */
        get: function () {
            return this._customBlocks;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Append an item to the customBlocks collection.
     */
    DocComment.prototype.appendCustomBlock = function (block) {
        this._customBlocks.push(block);
    };
    /** @override */
    DocComment.prototype.onGetChildNodes = function () {
        return [
            this.summarySection,
            this.remarksBlock,
            this.privateRemarks,
            this.deprecatedBlock
        ].concat(this.paramBlocks, this.typeParamBlocks, [
            this.returnsBlock
        ], this._customBlocks, [
            this.inheritDocTag
        ], this.modifierTagSet.nodes);
    };
    return DocComment;
}(DocNode_1.DocNode));
exports.DocComment = DocComment;
//# sourceMappingURL=DocComment.js.map