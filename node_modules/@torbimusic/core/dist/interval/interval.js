"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interval_quality_1 = require("./interval.quality");
var Interval = /** @class */ (function () {
    function Interval(_name, _grades, _semitones, _aliases) {
        this._name = _name;
        this._grades = _grades;
        this._semitones = _semitones;
        this._aliases = _aliases;
        this._notes = _grades - 1;
        this._quality = this.getQuality();
    }
    Interval.prototype.getQuality = function () {
        var quality = this.name.substring(this.grades.toString().length, this.name.length);
        return interval_quality_1.IntervalQualities.parse(this.grades, quality);
    };
    Object.defineProperty(Interval.prototype, "notes", {
        /**
         * @returns the number of distance in notes.
         */
        get: function () {
            return this._notes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "grades", {
        /**
         * @returns the number of distance in grades.
         */
        get: function () {
            return this._grades;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "semitones", {
        /**
         * @returns the number of distance in semitones.
         */
        get: function () {
            return this._semitones;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "name", {
        /**
         * @returns the name who represents the interval.
         */
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "aliases", {
        /**
         * @returns list of aliases, like substitutions of name.
         * `parse(string)` method uses this if the provided string doesn't match
         * with the name.
         */
        get: function () {
            return this._aliases;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interval.prototype, "quality", {
        /**
         * @returns The quality of the interval (MINOR, MAJOR, AUGMENTED, DIMINISHED, PERFECT)
         */
        get: function () {
            return this._quality;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param intervalString string representation of an interval
     * @description try to parse the string to an interval instance
     * @returns the resulted Interval or undefined
     */
    Interval.parse = function (intervalString) {
        var interval = this.INTERVALS.find(function (i) { return i.name === intervalString; });
        if (!interval) {
            for (var _i = 0, _a = this.INTERVALS; _i < _a.length; _i++) {
                var value = _a[_i];
                if (value.aliases && value.aliases.some(function (alias) { return alias === intervalString; })) {
                    interval = value;
                    break;
                }
            }
        }
        return interval;
    };
    /**
     *
     * @param noteA First point of interval
     * @param noteB Second point of interval
     * @returns the interval between both notes
     * @example ```
let noteA = Note.parse('C')
let noteB = Note.parse('F')
Interval.of(noteA, noteB) // '4J'
     ```
     */
    Interval.of = function (noteA, noteB) {
        var _a = noteA.distanceOf(noteB), notes = _a.notes, semitones = _a.semitones;
        return this.fromGradesAndSemitones(notes + 1, semitones);
    };
    /**
     * @description for correct Interval it is necesary provide both: grades and semitones.
     * @param grades
     * @param semitones
     * @example ```
     let interval = Interval.fromGradesAndSemitones(3, 4)
     interval // '3M'
    
     interval = Interval.fromGradesAndSemitones(3, 3)
     interval // '3m'
     ```
     */
    Interval.fromGradesAndSemitones = function (grades, semitones) {
        var interval;
        for (var _i = 0, _a = this.INTERVALS; _i < _a.length; _i++) {
            var value = _a[_i];
            if (value.grades === grades && value.semitones === semitones) {
                interval = value;
                break;
            }
        }
        return interval;
    };
    Interval.prototype.toString = function () {
        return this.name;
    };
    /**
     * @param note note to apply the interval trasposition
     * @returns the resulting note
     * @example ```
     let interval = Interval.parse('2M')
     let note = Note.parse('C')
    
     interval.traspose(note) // 'D'
     ```
     */
    Interval.prototype.traspose = function (note) {
        return note.traspose({ notes: this.notes % 7, semitones: this.semitones % 12 });
    };
    /**
     *
     * @param interval Interval to add to current interval
     * @example ```
     let _2M = Interval.parse('2M')
     let _2m = Interval.parse('2m')
    
     _2M.add(_2m) // 3m
     
     ```
     */
    Interval.prototype.add = function (interval) {
        var newInterval;
        var grades = this.grades + interval.grades;
        var semitones = this.semitones + interval.semitones;
        newInterval = Interval.fromGradesAndSemitones(grades, semitones);
        if (!newInterval) {
            newInterval = Interval.fromGradesAndSemitones(grades % 7, semitones % 7);
        }
        return newInterval;
    };
    Interval.INTERVALS = [
        new Interval('1', 1, 0, ['T']),
        new Interval('2m', 2, 1),
        new Interval('2M', 2, 2, ['2']),
        new Interval('2aug', 2, 3, ['2+', '2#']),
        new Interval('3m', 3, 3),
        new Interval('3M', 3, 4, ['3']),
        new Interval('4J', 4, 5, ['4', '4j']),
        new Interval('4aug', 4, 6, ['4+', '4#']),
        new Interval('5dim', 5, 6, ['5°']),
        new Interval('5J', 5, 7, ['5', '5j']),
        new Interval('5aug', 5, 8, ['5+', '5#']),
        new Interval('6m', 6, 8),
        new Interval('6M', 6, 9, ['6']),
        new Interval('6aug', 6, 9, ['6+', '6#']),
        new Interval('7dim', 7, 9, ['7°']),
        new Interval('7m', 7, 10),
        new Interval('7M', 7, 11, ['7']),
        new Interval('8', 8, 12),
        new Interval('9m', 9, 13, ['b9']),
        new Interval('9M', 9, 14, ['9']),
        new Interval('11', 11, 17),
        new Interval('11aug', 11, 18, ['11+', '11#']),
        new Interval('13m', 13, 20, ['b13']),
        new Interval('13', 13, 21, ['13M'])
    ];
    return Interval;
}());
exports.Interval = Interval;
//# sourceMappingURL=interval.js.map