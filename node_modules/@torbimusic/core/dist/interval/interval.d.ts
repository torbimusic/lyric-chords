import { Note } from "../note/note";
import { IntervalQuality } from "./interval.quality";
export declare class Interval {
    private _name;
    private _grades;
    private _semitones;
    private _aliases?;
    private static INTERVALS;
    private _notes;
    private _quality;
    private constructor();
    private getQuality;
    /**
     * @returns the number of distance in notes.
     */
    readonly notes: number;
    /**
     * @returns the number of distance in grades.
     */
    readonly grades: number;
    /**
     * @returns the number of distance in semitones.
     */
    readonly semitones: number;
    /**
     * @returns the name who represents the interval.
     */
    readonly name: string;
    /**
     * @returns list of aliases, like substitutions of name.
     * `parse(string)` method uses this if the provided string doesn't match
     * with the name.
     */
    readonly aliases: string[];
    /**
     * @returns The quality of the interval (MINOR, MAJOR, AUGMENTED, DIMINISHED, PERFECT)
     */
    readonly quality: IntervalQuality;
    /**
     * @param intervalString string representation of an interval
     * @description try to parse the string to an interval instance
     * @returns the resulted Interval or undefined
     */
    static parse(intervalString: string): Interval;
    /**
     *
     * @param noteA First point of interval
     * @param noteB Second point of interval
     * @returns the interval between both notes
     * @example ```
let noteA = Note.parse('C')
let noteB = Note.parse('F')
Interval.of(noteA, noteB) // '4J'
     ```
     */
    static of(noteA: Note, noteB: Note): Interval;
    /**
     * @description for correct Interval it is necesary provide both: grades and semitones.
     * @param grades
     * @param semitones
     * @example ```
     let interval = Interval.fromGradesAndSemitones(3, 4)
     interval // '3M'
    
     interval = Interval.fromGradesAndSemitones(3, 3)
     interval // '3m'
     ```
     */
    static fromGradesAndSemitones(grades: number, semitones: number): Interval;
    toString(): string;
    /**
     * @param note note to apply the interval trasposition
     * @returns the resulting note
     * @example ```
     let interval = Interval.parse('2M')
     let note = Note.parse('C')
    
     interval.traspose(note) // 'D'
     ```
     */
    traspose(note: Note): Note;
    /**
     *
     * @param interval Interval to add to current interval
     * @example ```
     let _2M = Interval.parse('2M')
     let _2m = Interval.parse('2m')
    
     _2M.add(_2m) // 3m
     
     ```
     */
    add(interval: Interval): Interval;
}
