"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bass_analyzer_1 = require("./bass-analyzer");
var superior_analyzer_1 = require("./superior-analyzer");
var chord_1 = require("../chord");
var addsus_analyzer_1 = require("./addsus-analyzer");
var basechord_analyzer_1 = require("./basechord-analyzer");
var MAX_LENGTH = 15;
var ChordAnalyzer = /** @class */ (function () {
    function ChordAnalyzer() {
        this.traditionalUpperCapital = "La[b#]?|Si[b#]?|Do[b#]?|Re[b#]?|Mi[b#]?|Fa[b#]?|Sol[b#]?";
        this.traditionaLowerCase = "la[b#]?|si[b#]?|do[b#]?|re[b#]?|mi[b#]?|fa[b#]?|sol[b#]?";
        this.traditionalNoteRe = "LA[b#]?|SI[b#]?|DO[b#]?|RE[b#]?|MI[b#]?|FA[b#]?|SOL[b#]?"
            + "|" + this.traditionalUpperCapital
            + "|" + this.traditionaLowerCase;
        this.americanNoteRe = "^[A-G]{1}[b#]?";
        this.chordsRe = "^(" + this.traditionalNoteRe + "|" + this.americanNoteRe + ")";
        this.separeTraditionalNoteAndAlteration = "^(LA|SI|DO|RE|MI|FA|SOL)([b#]?)";
        this.majRe = "(maj6|maj7|maj9|maj11|maj13|maj|M6|M7|M9|M11|M13|M|\\+7)?";
        this.qualityRe = "([(?i)m\\+]|aug|°|º|dim)?";
        this.fifthRe = "(5b|\\+5|5aum|5#|b5|5º|5°|5)?";
        // Addition iteration
        this.addsRe = "(add2|add4|add6|add9|add11|add13)";
        this.susRe = "(sus2|sus4|sus)";
        this.separateSusFromNumber = "(sus)(\\d)?";
        this.separateAddFromNumber = "(add)(\\d{1,2})";
        this.majAndAugRe = "(maj6|maj7|maj9|maj11|maj13|maj|M6|M7|M9|M11|M13|M|\\+5|\\+6|\\+7|\\+9|\\+11|\\+13|\\+)";
        this.extraNotesRe = "([b#]?[5|6|7|9|11|13][bM\+]?)";
        this.additionsIterationRe = "(\\(?" + this.addsRe + "|" + this.susRe + "|" + this.majAndAugRe + "|" + this.extraNotesRe + "\\)?)*";
        // END Addition iteration
        this.alterationInParenthesis = "(\\((,?" + this.majAndAugRe + "|,?" + this.extraNotesRe + ")*\\))?";
        this.alterationsAfterSlashRe = "(\\/([b#]?[5|6|7|9|[11]{2}|[13]{2}][bM\\+]?))*";
        this.bassRe = "(\\/(" + this.traditionalNoteRe + "|[A-G]{1}[b#]?))?";
        this.regex = this.chordsRe + this.majRe + this.qualityRe + this.fifthRe
            + this.additionsIterationRe
            + this.alterationInParenthesis
            + this.alterationsAfterSlashRe + this.bassRe;
    }
    ChordAnalyzer.prototype.apply = function (input) {
        var regexResult = input.match(new RegExp(this.regex));
        if (regexResult) {
            var regexAnalisis = new RegexAnalisis(regexResult);
            var addSusAnalisis = addsus_analyzer_1.AddSusAnalyzer.apply(regexAnalisis.chord);
            var base = basechord_analyzer_1.BaseChordAnalyzer.apply(regexAnalisis.note, regexAnalisis.fifth, regexAnalisis.quality);
            var bass = bass_analyzer_1.BassAnalyzer.apply(regexAnalisis.bass, base.note);
            var chord = void 0;
            if (regexAnalisis.chord) {
                chord = new chord_1.Chord(base, addSusAnalisis.adds, addSusAnalisis.sus, superior_analyzer_1.SuperiorAnalyzer.apply(regexAnalisis.chord, regexAnalisis.note, regexAnalisis.quality, regexAnalisis.bass, addSusAnalisis.adds.concat(addSusAnalisis.sus)), bass);
            }
            return chord;
        }
    };
    return ChordAnalyzer;
}());
exports.ChordAnalyzer = ChordAnalyzer;
var RegexAnalisis = /** @class */ (function () {
    function RegexAnalisis(regExpMatchArray) {
        this.chord = regExpMatchArray[0];
        this.note = regExpMatchArray[1];
        this.quality = regExpMatchArray[3];
        this.fifth = regExpMatchArray[4];
        this.adds = regExpMatchArray[6];
        this.sus = regExpMatchArray[7];
        this.majAndAug = regExpMatchArray[2] ? [regExpMatchArray[2]] : [];
        if (regExpMatchArray[8])
            this.majAndAug.push(regExpMatchArray[8]);
        this.extraNotes = regExpMatchArray[9] ? [regExpMatchArray[9]] : [];
        if (regExpMatchArray[11])
            this.majAndAug.push(regExpMatchArray[11]);
        this.bass = regExpMatchArray[17];
    }
    return RegexAnalisis;
}());
//# sourceMappingURL=chord-analyzer.js.map