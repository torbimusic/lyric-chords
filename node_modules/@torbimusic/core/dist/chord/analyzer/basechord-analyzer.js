"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var base_chord_1 = require("../models/base-chord");
var constants_1 = require("../../constants");
var note_analyzer_1 = require("../../note/analyzer/note-analyzer");
var BaseChordAnalyzer = /** @class */ (function () {
    function BaseChordAnalyzer() {
        this.fifthRe = "5b|\\+5|b5|5º|5°|5";
    }
    BaseChordAnalyzer.apply = function (noteString, fifth, quality) {
        return new base_chord_1.BaseChord(note_analyzer_1.NoteAnalyzer.apply(noteString), this.resolveQuality(quality, fifth));
    };
    BaseChordAnalyzer.analyzeFifth = function (fifth) {
        var result = constants_1.PerfectNoteQuality.PERFECT;
        switch (fifth) {
            case "b5":
            case "5b":
            case "5º":
            case "5°":
                result = constants_1.PerfectNoteQuality.DIMINISHED;
                break;
            case "+5":
            case "5aum":
            case "5#":
                result = constants_1.PerfectNoteQuality.AUGMENTED;
                break;
            case "5":
                result = constants_1.PerfectNoteQuality.FIFTH;
                break;
        }
        return result;
    };
    BaseChordAnalyzer.analyzeQuality = function (quality) {
        var result = constants_1.ChordQuality.MAJOR;
        if (this.QUALITY_AUG.some(function (a) { return a === quality; })) {
            result = constants_1.ChordQuality.AUGMENTED;
        }
        else if (this.QUALITY_DIM.some(function (a) { return a === quality; })) {
            result = constants_1.ChordQuality.DIMINISHED;
        }
        else if (this.QUALITY_MINOR.some(function (a) { return a === quality; })) {
            result = constants_1.ChordQuality.MINOR;
        }
        return result;
    };
    BaseChordAnalyzer.resolveQuality = function (qualityString, fifthString) {
        var quality = this.analyzeQuality(qualityString);
        var fifthQuality = this.analyzeFifth(fifthString);
        var result;
        if (fifthQuality === constants_1.PerfectNoteQuality.FIFTH) {
            result = constants_1.ChordQuality.FIFTH;
        }
        else {
            switch (quality) {
                case constants_1.ChordQuality.MAJOR:
                    switch (fifthQuality) {
                        case constants_1.PerfectNoteQuality.AUGMENTED:
                            result = constants_1.ChordQuality.AUGMENTED;
                            break;
                        case constants_1.PerfectNoteQuality.PERFECT:
                        case constants_1.PerfectNoteQuality.DIMINISHED:
                            result = constants_1.ChordQuality.MAJOR;
                            break;
                    }
                    break;
                case constants_1.ChordQuality.MINOR:
                    switch (fifthQuality) {
                        case constants_1.PerfectNoteQuality.AUGMENTED: // lo ignoro: sería un acorde en primera inversión mal escrito
                        case constants_1.PerfectNoteQuality.PERFECT:
                            result = constants_1.ChordQuality.MINOR;
                            break;
                        case constants_1.PerfectNoteQuality.DIMINISHED:
                            result = constants_1.ChordQuality.DIMINISHED;
                            break;
                    }
                    break;
                case constants_1.ChordQuality.AUGMENTED:
                    switch (fifthQuality) {
                        case constants_1.PerfectNoteQuality.AUGMENTED:
                        case constants_1.PerfectNoteQuality.DIMINISHED: // lo ignoro: sería una #11? 
                        case constants_1.PerfectNoteQuality.PERFECT:
                            result = constants_1.ChordQuality.AUGMENTED;
                            break;
                    }
                    break;
                case constants_1.ChordQuality.DIMINISHED:
                    switch (fifthQuality) {
                        case constants_1.PerfectNoteQuality.AUGMENTED: // Lo ignoro: sería una b13?
                        case constants_1.PerfectNoteQuality.DIMINISHED:
                        case constants_1.PerfectNoteQuality.PERFECT:
                            result = constants_1.ChordQuality.DIMINISHED;
                            break;
                    }
                    break;
            }
        }
        return result;
    };
    BaseChordAnalyzer.QUALITY_MINOR = ["m"];
    BaseChordAnalyzer.QUALITY_AUG = ["+", "aug"];
    BaseChordAnalyzer.QUALITY_DIM = ["dim", "º", "°"];
    return BaseChordAnalyzer;
}());
exports.BaseChordAnalyzer = BaseChordAnalyzer;
//# sourceMappingURL=basechord-analyzer.js.map