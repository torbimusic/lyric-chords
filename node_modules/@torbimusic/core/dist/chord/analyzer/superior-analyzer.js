"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var superior_chord_1 = require("../models/superior-chord");
var SuperiorAnalyzer = /** @class */ (function () {
    function SuperiorAnalyzer() {
    }
    SuperiorAnalyzer.apply = function (chord, note, quality, bass, ignoreNumbers) {
        if (bass === void 0) { bass = undefined; }
        if (ignoreNumbers === void 0) { ignoreNumbers = []; }
        chord = chord.split(note)[1];
        if (quality)
            chord = chord.split(quality)[1];
        if (bass)
            chord = chord.split(bass)[0];
        if (chord) {
            var result = {
                maj: [],
                aug: [],
                flat: [],
                sharp: [],
                simple: []
            };
            var match = chord.match(new RegExp(this.regex, 'g'));
            if (match) {
                result = this.analyzeMatch(match, ignoreNumbers);
            }
            return new superior_chord_1.SuperiorChord(result.maj, result.aug, result.flat, result.sharp, result.simple);
        }
        else {
            return new superior_chord_1.SuperiorChord();
        }
    };
    SuperiorAnalyzer.analyzeMatch = function (match, ignoreNumbers) {
        var _this = this;
        var maj = [];
        var aug = [];
        var flat = [];
        var sharp = [];
        var simple = [];
        match.forEach(function (m) {
            var number = _this.separateNumberOnMatch(m);
            if (!ignoreNumbers.some(function (n) { return n == number; })) {
                if (m.match(_this.majRe) || m.match(_this.MRe)) {
                    maj.push(number || 7);
                }
                else if (m.match(_this.augRe)) {
                    if ([7, 9, 11, 13].some(function (n) { return n === number; })) { // +7 ser√≠a maj7
                        maj.push(number);
                    }
                    else {
                        aug.push(number);
                    }
                }
                else if (m.match(_this.flatRe)) {
                    flat.push(number);
                }
                else if (m.match(_this.sharpRe)) {
                    sharp.push(number);
                }
                else if (m.match(_this.simpleRe)) {
                    simple.push(number);
                }
            }
        });
        return {
            maj: maj,
            aug: aug,
            flat: flat,
            sharp: sharp,
            simple: simple
        };
    };
    SuperiorAnalyzer.separateNumberOnMatch = function (match) {
        var number = match.match(this.separateNumber);
        if (number) {
            number = parseInt(number[0]);
        }
        return number;
    };
    SuperiorAnalyzer.majRe = "maj6|maj7|maj9|maj11|maj13|maj";
    SuperiorAnalyzer.MRe = "M6|M7|M9|M11|M13|M";
    SuperiorAnalyzer.augRe = "\\+5|\\+6|\\+7|\\+9|\\+11|\\+13";
    SuperiorAnalyzer.flatRe = "b6|b9|b13|b5";
    SuperiorAnalyzer.sharpRe = "#9|#11|#4";
    SuperiorAnalyzer.simpleRe = "6|7|9|11|13";
    SuperiorAnalyzer.separateNumber = "\\d{1,2}";
    SuperiorAnalyzer.regex = SuperiorAnalyzer.majRe
        // + '|' + SuperiorAnalyzer.MRe
        + '|' + SuperiorAnalyzer.augRe
        + '|' + SuperiorAnalyzer.flatRe
        + '|' + SuperiorAnalyzer.sharpRe
        + '|' + SuperiorAnalyzer.simpleRe;
    return SuperiorAnalyzer;
}());
exports.SuperiorAnalyzer = SuperiorAnalyzer;
//# sourceMappingURL=superior-analyzer.js.map