"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var superior_chord_1 = require("./models/superior-chord");
var base_chord_1 = require("./models/base-chord");
var note_1 = require("../note/note");
var chord_to_string_1 = require("./functions/chord-to-string");
var notation_1 = require("../constants/notation");
var chord_analyzer_1 = require("./analyzer/chord-analyzer");
var chord_builder_1 = require("./chord.builder");
var constants_1 = require("../constants");
var interval_quality_1 = require("../interval/interval.quality");
var Chord = /** @class */ (function () {
    function Chord(_base, _additions, _suspended, _superior, _bass) {
        if (_additions === void 0) { _additions = []; }
        if (_suspended === void 0) { _suspended = []; }
        if (_superior === void 0) { _superior = new superior_chord_1.SuperiorChord(); }
        if (_bass === void 0) { _bass = undefined; }
        this._base = _base;
        this._additions = _additions;
        this._suspended = _suspended;
        this._superior = _superior;
        this._bass = _bass;
        this._additions = _additions.sort(function (a, b) { return a - b < 1 ? 1 : 0; });
        this._suspended = _suspended.sort(function (a, b) { return a - b < 1 ? 1 : 0; });
        if (!this.bass) {
            this._bass = this.base.note;
        }
    }
    Object.defineProperty(Chord.prototype, "base", {
        get: function () {
            return this._base;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chord.prototype, "additions", {
        get: function () {
            return this._additions.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chord.prototype, "suspended", {
        get: function () {
            return this._suspended.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chord.prototype, "superior", {
        get: function () {
            return this._superior;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Chord.prototype, "bass", {
        get: function () {
            return this._bass;
        },
        enumerable: true,
        configurable: true
    });
    Chord.prototype.toString = function (notation) {
        if (notation === void 0) { notation = notation_1.Notation.AMERICAN; }
        var chord = '';
        switch (notation) {
            case notation_1.Notation.AMERICAN:
                chord = chord_to_string_1.chordToString(this);
                break;
            case notation_1.Notation.SOUTHERN_EUROPEAN:
                chord = chord_to_string_1.chordToStringNaturalNote(this);
                break;
        }
        return chord;
    };
    Chord.parse = function (chord) {
        return this.analyzer.apply(chord);
    };
    Chord.simple = function (note, quality) {
        if (typeof note === 'string') {
            note = note_1.Note.parse(note);
        }
        return new chord_builder_1.ChordBuilder()
            .base(new base_chord_1.BaseChord(note, quality))
            .build();
    };
    Chord.triad = function (tonic, third, fifth) {
        var quality;
        var fifthQuality = tonic.intervalOf(fifth).quality;
        if (tonic.intervalOf(third).quality === interval_quality_1.IntervalQuality.MAJOR) {
            quality = constants_1.ChordQuality.MAJOR;
        }
        else {
            quality = constants_1.ChordQuality.MINOR;
        }
        if (fifthQuality === interval_quality_1.IntervalQuality.DIMINISHED) {
            quality = constants_1.ChordQuality.DIMINISHED;
        }
        if (fifthQuality === interval_quality_1.IntervalQuality.AUGMENTED) {
            quality = constants_1.ChordQuality.AUGMENTED;
        }
        var baseChord = new base_chord_1.BaseChord(tonic, quality);
        return new chord_builder_1.ChordBuilder()
            .base(baseChord)
            .build();
    };
    Chord.prototype.toBuilder = function () {
        return chord_builder_1.ChordBuilder.from(this);
    };
    Chord.prototype.traspose = function (interval) {
        var newBaseNote = interval.traspose(this.base.note);
        var newBaseBass = interval.traspose(this.bass);
        return chord_builder_1.ChordBuilder.from(this)
            .noteBase(newBaseNote)
            .bass(newBaseBass)
            .build();
    };
    Chord.analyzer = new chord_analyzer_1.ChordAnalyzer();
    return Chord;
}());
exports.Chord = Chord;
//# sourceMappingURL=chord.js.map