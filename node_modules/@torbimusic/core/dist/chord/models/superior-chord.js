"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SuperiorChord = /** @class */ (function () {
    function SuperiorChord(maj, aug, flat, sharp, simple) {
        if (maj === void 0) { maj = []; }
        if (aug === void 0) { aug = []; }
        if (flat === void 0) { flat = []; }
        if (sharp === void 0) { sharp = []; }
        if (simple === void 0) { simple = []; }
        this.maj = maj;
        this.aug = aug;
        this.flat = flat;
        this.sharp = sharp;
        this.simple = simple;
    }
    SuperiorChord.prototype.simpleSuperiorToString = function () {
        var result = '';
        var simple = this.simple.sort(this.invertedSort)[0];
        if (simple)
            result += simple;
        var maj = this.maj.sort(this.invertedSort)[0];
        if (maj)
            result += 'maj' + maj;
        return result;
    };
    SuperiorChord.prototype.alterationsToString = function () {
        var result = '';
        if (this.flat.length > 0 || this.aug.length > 0 || this.sharp.length > 0) {
            result += '(';
            var alterations = this.aug.map(function (a) { return '#' + a; })
                .concat(this.flat.map(function (a) { return 'b' + a; }))
                .concat(this.sharp.map(function (a) { return '#' + a; }));
            alterations.forEach(function (element, i) {
                result += i === 0 ? element : ',' + element;
            });
            result += ')';
        }
        return result;
    };
    SuperiorChord.prototype.toString = function () {
        var result = '';
        this.simple.forEach(function (element) { return result += element; });
        this.maj.forEach(function (element) { return result += 'maj' + element; });
        if (this.flat.length > 0 || this.aug.length > 0 || this.sharp.length > 0) {
            result += '(';
            var alterations = this.aug.map(function (a) { return 'aug' + a; })
                .concat(this.flat.map(function (a) { return 'b' + a; }))
                .concat(this.sharp.map(function (a) { return '#' + a; }));
            alterations.forEach(function (element, i) {
                result += i === 0 ? element : ',' + element;
            });
            result += ')';
        }
        return result;
    };
    SuperiorChord.prototype.invertedSort = function (a, b) {
        return a - b < 0 ? 1 : 0;
    };
    return SuperiorChord;
}());
exports.SuperiorChord = SuperiorChord;
//# sourceMappingURL=superior-chord.js.map