"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var scale_1 = require("./scale");
var note_1 = require("../note");
var interval_1 = require("../interval/interval");
var MinorScale = /** @class */ (function (_super) {
    __extends(MinorScale, _super);
    function MinorScale(_tonic) {
        var _this = _super.call(this, _tonic, MinorScale._grades) || this;
        _this._tonic = _tonic;
        return _this;
    }
    MinorScale.prototype.traspose = function (interval) {
        var newTonic = interval.traspose(this._tonic);
        return MinorScale.TONALITIES.find(function (tonality) { return tonality._tonic.equals(newTonic); });
    };
    MinorScale.from = function (tonic) {
        if (!MinorScale.TONALITIES) {
            MinorScale.lazyCreation();
        }
        return MinorScale.TONALITIES.find(function (scale) { return scale.tonic.equals(tonic); });
    };
    MinorScale.lazyCreation = function () {
        MinorScale.TONALITIES = [
            new MinorScale(note_1.Note.parse('A')),
            new MinorScale(note_1.Note.parse('Bb')),
            new MinorScale(note_1.Note.parse('B')),
            new MinorScale(note_1.Note.parse('C')),
            new MinorScale(note_1.Note.parse('C#')),
            new MinorScale(note_1.Note.parse('Db')),
            new MinorScale(note_1.Note.parse('D')),
            new MinorScale(note_1.Note.parse('Eb')),
            new MinorScale(note_1.Note.parse('E')),
            new MinorScale(note_1.Note.parse('F')),
            new MinorScale(note_1.Note.parse('F#')),
            new MinorScale(note_1.Note.parse('G')),
            new MinorScale(note_1.Note.parse('Ab'))
        ];
    };
    MinorScale._grades = [
        interval_1.Interval.parse('2M'),
        interval_1.Interval.parse('2m'),
        interval_1.Interval.parse('2M'),
        interval_1.Interval.parse('2M'),
        interval_1.Interval.parse('2m'),
        interval_1.Interval.parse('2M'),
        interval_1.Interval.parse('2M')
    ];
    return MinorScale;
}(scale_1.Scale));
exports.MinorScale = MinorScale;
//# sourceMappingURL=minor.js.map