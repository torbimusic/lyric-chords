"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chord_1 = require("../chord");
var Scale = /** @class */ (function () {
    function Scale(_tonic, _grades) {
        var _this = this;
        this._tonic = _tonic;
        this._grades = _grades;
        this._gradesFromTonic = [];
        this._notes = [];
        this._triads = [];
        this._notes.push(_tonic);
        this._gradesFromTonic.push(_tonic.intervalOf(_tonic));
        this._grades.forEach(function (grade, i) {
            var lastNote = _this._notes[_this._notes.length - 1];
            var nextNote = grade.traspose(lastNote);
            _this._gradesFromTonic.push(_tonic.intervalOf(nextNote));
            _this._notes.push(nextNote);
        });
        this._notes.forEach(function (tonic, i) {
            var third = _this.thirdOf(tonic);
            var fifth = _this.fifthOf(tonic);
            _this._triads.push(chord_1.Chord.triad(tonic, third, fifth));
        });
    }
    Object.defineProperty(Scale.prototype, "tonic", {
        get: function () {
            return this._tonic;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scale.prototype, "grades", {
        get: function () {
            return this._grades;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scale.prototype, "gradesFromTonic", {
        get: function () {
            return this._gradesFromTonic;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scale.prototype, "notes", {
        get: function () {
            return this._notes;
        },
        enumerable: true,
        configurable: true
    });
    Scale.prototype.note = function (grade) {
        return this._notes[grade - 1 % 7];
    };
    Object.defineProperty(Scale.prototype, "triads", {
        get: function () {
            return this._triads;
        },
        enumerable: true,
        configurable: true
    });
    Scale.prototype.triad = function (grade) {
        return this._triads[grade - 1 % 7];
    };
    Scale.prototype.thirdOf = function (note) {
        return this.gradeOf(note, 3);
    };
    Scale.prototype.fifthOf = function (note) {
        return this.gradeOf(note, 5);
    };
    Scale.prototype.gradeOf = function (note, grade) {
        var gradeNote;
        var noteIndex = this._notes.findIndex(function (n) { return n.equals(note); });
        if (noteIndex >= 0) {
            gradeNote = this._notes[(noteIndex + (grade - 1)) % 7];
        }
        return gradeNote;
    };
    return Scale;
}());
exports.Scale = Scale;
//# sourceMappingURL=scale.js.map