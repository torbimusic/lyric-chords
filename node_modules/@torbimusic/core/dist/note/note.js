"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var southern_european_note_1 = require("../constants/southern-european-note");
var american_notation_1 = require("../notation/american-notation");
var notations_1 = require("../notation/notations");
var cant_traspose_tonalities_1 = require("../errors/cant-traspose-tonalities");
var note_alterations_1 = require("./note-alterations");
var interval_1 = require("../interval/interval");
var Note = /** @class */ (function () {
    function Note(_note, _alteration, _absoluteValue) {
        this._note = _note;
        this._alteration = _alteration;
        this._absoluteValue = _absoluteValue;
    }
    Object.defineProperty(Note.prototype, "note", {
        get: function () {
            return this._note;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Note.prototype, "alteration", {
        get: function () {
            return this._alteration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Note.prototype, "absoluteValue", {
        /**
         * Represents a value for distinguish of diferents sound of notes.
         *
         * If the note are enharmonic, they have the same absolute value.
         *
         * It is used for internal functions.
         */
        get: function () {
            return this._absoluteValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Find enharmonic note above
     *
     * e.g:
     ```
let note = Note.parse('C#')
    .enharmonicToNoteAbove()

note.toString() // Db
    ```
     
     *
     * @returns enharmonic note above or null if doesn't exists
     */
    Note.prototype.enharmonicToNoteAbove = function () {
        var newNote = constants_1.AmericanNote[(this.note + 1) % 7];
        return this.enharmonic(constants_1.AmericanNote[newNote]);
    };
    /**
     * Find enharmonic note below
     *
     * e.g:
     ```
let note = Note.parse('Db')
    .enharmonicToNoteBelow()

note.toString() // C#
```
     * @returns enharmonic note above or null if doesn't exists
     */
    Note.prototype.enharmonicToNoteBelow = function () {
        var newNote = constants_1.AmericanNote[(this.note + 6) % 7];
        return this.enharmonic(constants_1.AmericanNote[newNote]);
    };
    Note.prototype.enharmonic = function (toNote) {
        var _this = this;
        return Note.NOTES
            .filter(function (n) { return n._absoluteValue === _this._absoluteValue; })
            .find(function (n) { return n.note === toNote; });
    };
    // get absoluteValue():number {
    //     return this._absoluteValue
    // }
    /**
     * @param alteration alteration to compare
     * @returns `true` if the current note alteration it's below the provided alteration.
     *
     * Compare the current note alteration with the provided one.
     *
     * e.g:
     *
     * ```
let isAltBelow = Note
    .parse('C#')
    .isAlterationBelow(NoteAlteration.FLAT)

isAltBelow // false
```
     *
     *
     */
    Note.prototype.isAlterationBelow = function (alteration) {
        return note_alterations_1.NoteAlterations.value(this.alteration) < note_alterations_1.NoteAlterations.value(alteration);
    };
    /**
     * @param note
     * @returns the distance between the current note and the provided
     *
     * e.g:
    ```
let g = Note.parse('G')
let a = Note.parse('A')

let distance = g.distanceOf(a)
// { notes : 1, semitones : 2 }
    ```
     */
    Note.prototype.distanceOf = function (note) {
        return {
            notes: ((note._note + 7) - this.note) % 7,
            semitones: ((note._absoluteValue + 12) - this._absoluteValue) % 12
        };
    };
    /**
     *
     * @param note
     * @returns the interval between the current note and the provided one.
     */
    Note.prototype.intervalOf = function (note) {
        var _a = this.distanceOf(note), notes = _a.notes, semitones = _a.semitones;
        return interval_1.Interval.fromGradesAndSemitones(notes + 1, semitones);
    };
    /**
     * @param distance
     * @returns the trasposed note
     *
     * e.g:
     ```
    let noteA = Note.parse('A')
    let distance = { notes: 1, semitones : 2 }
    
    noteA.traspose(distance) // B
     ```
     
     */
    Note.prototype.traspose = function (distance) {
        var _this = this;
        return Note.NOTES.find(function (note) {
            var noteDistance = _this.distanceOf(note);
            return noteDistance.notes === distance.notes
                && noteDistance.semitones == distance.semitones;
        });
    };
    /**
     * @param fromTonality The current tonality context of the note
     * @param toTonality The desired tonality context for the note
     * @returns the note trasposed to represent the same interval in the new
     * tonality as was in the current.
     *
     * e.g:
```
let noteA = Note.parse('A')
let currentTonality = Note.parse('C')
let newTonality = Note.parse('D')

noteA.traspose(currentTonality, newTonality) // B

```

In the example, `A` represent a `6M` in `C`, as `B` is a `6M` in D.
     */
    Note.prototype.trasposeTonality = function (fromTonality, toTonality) {
        var trasposedNote = this.traspose(fromTonality.distanceOf(toTonality));
        if (!trasposedNote) {
            throw new cant_traspose_tonalities_1.CantTrasposeTonalityException(fromTonality.toString(), toTonality.toString());
        }
        return trasposedNote;
    };
    /**
     *
     * @param notation optional parameter. American by default.
     * @returns the note as String
     *
     * e.g with American:
    
     ```
    Note.parse('A').toString() // "A"
    Note.parse('A').toString(Notation.AMERICAN) // "A"
    ```
    *
    * e.g with Southern European:
    
     ```
    Note.parse('A').toString(Notation.SOUTHERN_EUROPEAN) // "LA"
     ```
     */
    Note.prototype.toString = function (notation) {
        if (notation === void 0) { notation = constants_1.Notation.AMERICAN; }
        var result;
        if (notation === constants_1.Notation.AMERICAN) {
            result = constants_1.AmericanNote[this.note] + note_alterations_1.NoteAlterations.toString(this.alteration);
        }
        else {
            result = southern_european_note_1.SouthernEuropeanNote[this.note] + note_alterations_1.NoteAlterations.toString(this.alteration);
        }
        return result;
    };
    Note.prototype.equals = function (note) {
        return note.alteration === this.alteration && note.note === this.note;
    };
    /**
     *
     * @param note note in American or SouthernEuropean Notation
     */
    Note.parse = function (note) {
        var americanNote = notations_1.Notations.parseToAmericanNote(note);
        var alterationString;
        if (notations_1.Notations.isSouthernEuropeanNote(note)) {
            if (americanNote === constants_1.AmericanNote.G && note.length >= 3) {
                alterationString = note.substring(3, note.length);
            }
            else if (note.length >= 2) {
                alterationString = note.substring(2, note.length);
            }
        }
        else if (note.length >= 1) {
            alterationString = note.substring(1, note.length);
        }
        var alteration = note_alterations_1.NoteAlterations.parse(alterationString);
        return Note.NOTES
            .find(function (note) {
            return note.note === americanNote
                && note.alteration === alteration;
        });
    };
    Note.fromNote = function (note, alteration) {
        var americanNote = american_notation_1.AmericanNotation.parse(note);
        return Note.NOTES
            .find(function (note) {
            return note.note === americanNote
                && note.alteration === alteration;
        });
    };
    Note.fromNoteAndAbsoluteValue = function (note, absoluteValue) {
        return this.NOTES
            .find(function (n) { return n._absoluteValue === absoluteValue && n.note === note; });
    };
    Note.allNotes = function () {
        return this.NOTES;
    };
    Note.NOTES = [
        new Note(constants_1.AmericanNote.A, constants_1.NoteAlteration.NATURAL, 0),
        new Note(constants_1.AmericanNote.A, constants_1.NoteAlteration.SHARP, 1),
        new Note(constants_1.AmericanNote.A, constants_1.NoteAlteration.DOUBLE_SHARP, 2),
        new Note(constants_1.AmericanNote.B, constants_1.NoteAlteration.DOUBLE_FLAT, 0),
        new Note(constants_1.AmericanNote.B, constants_1.NoteAlteration.FLAT, 1),
        new Note(constants_1.AmericanNote.B, constants_1.NoteAlteration.NATURAL, 2),
        new Note(constants_1.AmericanNote.B, constants_1.NoteAlteration.SHARP, 3),
        new Note(constants_1.AmericanNote.C, constants_1.NoteAlteration.FLAT, 2),
        new Note(constants_1.AmericanNote.C, constants_1.NoteAlteration.NATURAL, 3),
        new Note(constants_1.AmericanNote.C, constants_1.NoteAlteration.SHARP, 4),
        new Note(constants_1.AmericanNote.C, constants_1.NoteAlteration.DOUBLE_SHARP, 5),
        new Note(constants_1.AmericanNote.D, constants_1.NoteAlteration.DOUBLE_FLAT, 3),
        new Note(constants_1.AmericanNote.D, constants_1.NoteAlteration.FLAT, 4),
        new Note(constants_1.AmericanNote.D, constants_1.NoteAlteration.NATURAL, 5),
        new Note(constants_1.AmericanNote.D, constants_1.NoteAlteration.SHARP, 6),
        new Note(constants_1.AmericanNote.D, constants_1.NoteAlteration.DOUBLE_SHARP, 7),
        new Note(constants_1.AmericanNote.E, constants_1.NoteAlteration.DOUBLE_FLAT, 5),
        new Note(constants_1.AmericanNote.E, constants_1.NoteAlteration.FLAT, 6),
        new Note(constants_1.AmericanNote.E, constants_1.NoteAlteration.NATURAL, 7),
        new Note(constants_1.AmericanNote.E, constants_1.NoteAlteration.SHARP, 8),
        new Note(constants_1.AmericanNote.F, constants_1.NoteAlteration.FLAT, 7),
        new Note(constants_1.AmericanNote.F, constants_1.NoteAlteration.NATURAL, 8),
        new Note(constants_1.AmericanNote.F, constants_1.NoteAlteration.SHARP, 9),
        new Note(constants_1.AmericanNote.F, constants_1.NoteAlteration.DOUBLE_SHARP, 10),
        new Note(constants_1.AmericanNote.G, constants_1.NoteAlteration.DOUBLE_FLAT, 8),
        new Note(constants_1.AmericanNote.G, constants_1.NoteAlteration.FLAT, 9),
        new Note(constants_1.AmericanNote.G, constants_1.NoteAlteration.NATURAL, 10),
        new Note(constants_1.AmericanNote.G, constants_1.NoteAlteration.SHARP, 11),
        new Note(constants_1.AmericanNote.G, constants_1.NoteAlteration.DOUBLE_SHARP, 0),
        new Note(constants_1.AmericanNote.A, constants_1.NoteAlteration.DOUBLE_FLAT, 10),
        new Note(constants_1.AmericanNote.A, constants_1.NoteAlteration.FLAT, 11)
    ];
    return Note;
}());
exports.Note = Note;
//# sourceMappingURL=note.js.map